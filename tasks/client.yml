- name: Configure NFS domain
  template:
    src: idmapd.conf.template
    dest: /etc/idmapd.conf
    owner: root
    group: root
    mode: 0644
  notify: reload nfs

- name: Install NFS client package
  apt:
    name: nfs-common
    state: present

- service: name=nfs-common state=started enabled=yes
  when:
    - ansible_distribution == "Debian"
    - ansible_distribution_version|int < 9

- name: Ensure client mount directory exists
  file:
    path: "{{ item.value.path }}"
    state: directory
  with_dict: "{{ nfs_client_mounts }}"
  when: nfs_client_mounts is defined

- name: Mount up NFS
  mount:
    src: "{{ item.value.src }}"
    path: "{{ item.value.path }}"
    fstype: "{{ item.value.type|default('nfs4') }}"
    opts: "{{ item.value.options|default('_netdev,auto,noatime') }}"
    passno: 0
    dump: 0
    state: mounted
  with_dict: "{{ nfs_client_mounts }}"
  when:
  - nfs_client_mounts is defined
  - item.value.state is not defined or item.value.state == 'mounted'

- name: Delete from fstab
  mount:
    src: "{{ item.value.src }}"
    path: "{{ item.value.path }}"
    fstype: "{{ item.value.type|default('nfs4') }}"
    opts: "{{ item.value.options|default('_netdev,auto,noatime') }}"
    passno: 0
    dump: 0
    state: absent
  with_dict: "{{ nfs_client_mounts }}"
  when:
  - item.value.state is defined
  - item.value.state == 'absent'
  tags: delete

- name: Umount from fstab
  mount:
    src: "{{ item.value.src }}"
    path: "{{ item.value.path }}"
    fstype: "{{ item.value.type|default('nfs4') }}"
    opts: "{{ item.value.options|default('_netdev,auto,noatime') }}"
    passno: 0
    dump: 0
    state: unmounted
  with_dict: "{{ nfs_client_mounts }}"
  when:
  - item.value.state is defined
  - item.value.state == 'absent'
  tags: delete
